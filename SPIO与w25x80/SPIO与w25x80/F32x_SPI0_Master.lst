C51 COMPILER V8.16   F32X_SPI0_MASTER                                                      09/08/2012 11:11:44 PAGE 1   


C51 COMPILER V8.16, COMPILATION OF MODULE F32X_SPI0_MASTER
OBJECT MODULE PLACED IN .\F32x_SPI0_Master.obj
COMPILER INVOKED BY: E:\Keil\C51\BIN\C51.EXE ..\SPI\SPI\F32x_SPI0_Master.c BROWSE DEBUG OBJECTEXTEND PRINT(.\F32x_SPI0_M
                    -aster.lst) OBJECT(.\F32x_SPI0_Master.obj)

line level    source

   1          //-----------------------------------------------------------------------------
   2          // F32x_SPI0_Master.c
   3          //-----------------------------------------------------------------------------
   4          // Copyright 2006 Silicon Laboratories, Inc.
   5          // http://www.silabs.com
   6          //
   7          // Program Description:
   8          //
   9          // This program configures a C8051F32x as a 4-wire SPI Single Master.
  10          //
  11          // The SPI clock in this example is limited to 250 kHz when used with the
  12          // SPI0_Slave code example.  During a SPI_Read, the slave needs some time to
  13          // interpret the command and write the appropriate data to the SPI0DAT
  14          // register, and the slave no longer has enough time to complete the
  15          // SPI_READ_BUFFER command with a clock greater than 250 kHz.  For faster SPI
  16          // clocks, a dummy byte between the command and the first byte of Read data
  17          // will be required.
  18          //
  19          // This example is intended to be used with the SPI0_Slave example.
  20          //
  21          // Pinout:
  22          //
  23          // P0.0 - SPI SCK    (digital output, push-pull)
  24          // P0.1 - SPI MISO   (digital input, open-drain)
  25          // P0.2 - SPI MOSI   (digital output, push-pull)
  26          // P0.3 - SPI NSS    (digital output, push-pull)
  27          //
  28          // P2.2 - LED        (digital output, push-pull)
  29          //
  30          // all other port pins unused.
  31          //
  32          //
  33          // How To Test:
  34          //
  35          // 1) Download the code to a F320-TB that is connected as above to
  36          //    another device running the SPI0_Slave code.
  37          // 2) Verify that the LED pins on jumper J12 are populated.
  38          // 3) Verify J9 and J10 are populated.
  39          // 4) Run the code.
  40          // 5) If the communication passes, the LEDs on both the Master and Slave
  41          //    boards will blink slowly. If it fails, the LEDs will be OFF.
  42          //
  43          //
  44          // Target:         C8051F32x
  45          // Tool chain:     Keil C51 7.50 / Keil EVAL C51
  46          // Command Line:   None
  47          //
  48          // Release 1.0
  49          //    -Initial Revision (TP)
  50          //    -14 DEC 2006
  51          //
  52          
  53          //-----------------------------------------------------------------------------
  54          // Includes
C51 COMPILER V8.16   F32X_SPI0_MASTER                                                      09/08/2012 11:11:44 PAGE 2   

  55          //-----------------------------------------------------------------------------
  56          
  57          #include <C8051F320.h>                 // SFR declarations
  58          
  59          //-----------------------------------------------------------------------------
  60          // Global Constants
  61          //-----------------------------------------------------------------------------
  62          
  63          #define SYSCLK             12000000    // Internal oscillator frequency in Hz
  64          
  65          #define SPI_CLOCK          250000      // Maximum SPI clock
  66                                                 // The SPI clock is a maximum of 250 kHz
  67                                                 // when this example is used with
  68                                                 // the SPI0_Slave code example.
  69          
  70          #define MAX_BUFFER_SIZE    8           // Maximum buffer Master will send
  71          
  72          // Instruction Set
  73          #define  SLAVE_LED_ON      0x01        // Turn the Slave LED on
  74          #define  SLAVE_LED_OFF     0x02        // Turn the Slave LED off
  75          #define  SPI_WRITE         0x04        // Send a byte from the Master to the
  76                                                 // Slave
  77          #define  SPI_READ          0x08        // Send a byte from the Slave to the
  78                                                 // Master
  79          #define  SPI_WRITE_BUFFER  0x10        // Send a series of bytes from the
  80                                                 // Master to the Slave
  81          #define  SPI_READ_BUFFER   0x20        // Send a series of bytes from the Slave
  82                                                 // to the Master
  83          #define  ERROR_OCCURRED    0x40        // Indicator for the Slave to tell the
  84                                                 // Master an error occurred
  85          
  86          sbit LED = P2^2;                       // LED='1' means ON
  87          
  88          //-----------------------------------------------------------------------------
  89          // Global Variables
  90          //-----------------------------------------------------------------------------
  91          
  92          unsigned char SPI_Data = 0xA5;
  93          
  94          unsigned char SPI_Data_Array[MAX_BUFFER_SIZE] = {0};
  95          
  96          bit Error_Flag = 0;
  97          
  98          unsigned char Command = 0x00;
  99          
 100          //-----------------------------------------------------------------------------
 101          // Function Prototypes
 102          //-----------------------------------------------------------------------------
 103          
 104          void PCA0_Init (void);
 105          void Oscillator_Init (void);
 106          void Port_Init (void);
 107          void SPI0_Init (void);
 108          void Init_Device (void);
 109          
 110          void SPI_LED_On (void);
 111          void SPI_LED_Off (void);
 112          void SPI_Byte_Write (void);
 113          void SPI_Byte_Read (void);
 114          void SPI_Array_Write (void);
 115          void SPI_Array_Read (void);
 116          
C51 COMPILER V8.16   F32X_SPI0_MASTER                                                      09/08/2012 11:11:44 PAGE 3   

 117          void Delay(void);
 118          
 119          //-----------------------------------------------------------------------------
 120          // main() Routine
 121          //-----------------------------------------------------------------------------
 122          void main (void)
 123          {
 124   1         unsigned char test_value = 0x55;
 125   1         unsigned char test_array[MAX_BUFFER_SIZE] = {1,2,3,4,5,6,7,8};
 126   1         unsigned char i;
 127   1      
 128   1         Init_Device ();                     // Initializes hardware peripherals
 129   1      
 130   1         EA = 1;                             // Enable global interrupts
 131   1      
 132   1         LED = 0;
 133   1      
 134   1         // TEST BEGIN --------------------------------------------------------------
 135   1      
 136   1         SPI_Data = test_value;
 137   1      
 138   1         // Write a value
 139   1         SPI_Byte_Write ();
 140   1      
 141   1         while (!NSSMD0);                    // Wait until the Write transfer has
 142   1                                             // finished
 143   1      
 144   1         // Read the same value back
 145   1         SPI_Data = 0x00;
 146   1         SPI_Byte_Read ();
 147   1      
 148   1         while (!NSSMD0);                    // Wait until the Read transfer has
 149   1                                             // finished
 150   1      
 151   1         // Check if the sent value and returned value match
 152   1         if (SPI_Data != test_value)
 153   1         {
 154   2            Error_Flag = 1;
 155   2         }
 156   1      
 157   1         // Copy test_array into SPI_Data_Array
 158   1         for (i = 0; i < MAX_BUFFER_SIZE; i++)
 159   1         {
 160   2            SPI_Data_Array[i] = test_array[i];
 161   2         }
 162   1      
 163   1         // Send the array to the slave
 164   1         SPI_Array_Write ();
 165   1      
 166   1         while (!NSSMD0);                    // Wait until the Write transfer has
 167   1                                             // finished
 168   1      
 169   1         // Clear SPI_Data_Array for the SPI_Buffer_Read function
 170   1         for (i = 0; i < MAX_BUFFER_SIZE; i++)
 171   1         {
 172   2            SPI_Data_Array[i] = 0;
 173   2         }
 174   1      
 175   1         // Read the array back from the slave
 176   1         SPI_Array_Read ();
 177   1      
 178   1         while (!NSSMD0);                    // Wait until the Read transfer has
C51 COMPILER V8.16   F32X_SPI0_MASTER                                                      09/08/2012 11:11:44 PAGE 4   

 179   1                                             // finished
 180   1      
 181   1         // Check if the received array matches the sent array
 182   1         for (i = 0; i < MAX_BUFFER_SIZE; i++)
 183   1         {
 184   2            if (SPI_Data_Array[i] != test_array[i])
 185   2            {
 186   3               Error_Flag = 1;
 187   3            }
 188   2         }
 189   1      
 190   1         // END OF TEST -------------------------------------------------------------
 191   1      
 192   1         while (1)
 193   1         {
 194   2            // If no error has occurred, blink the LEDs on the Master and Slave
 195   2            // boards
 196   2            if (Error_Flag == 0)
 197   2            {
 198   3               LED = 1;
 199   3      
 200   3               SPI_LED_On ();
 201   3      
 202   3               while (!NSSMD0);
 203   3      
 204   3               Delay ();
 205   3      
 206   3               SPI_LED_Off ();
 207   3      
 208   3               LED = 0;
 209   3      
 210   3               while (!NSSMD0);
 211   3      
 212   3               Delay ();
 213   3            }
 214   2         };
 215   1      }
 216          
 217          //-----------------------------------------------------------------------------
 218          // Initialization Subroutines
 219          //-----------------------------------------------------------------------------
 220          
 221          //-----------------------------------------------------------------------------
 222          // PCA0_Init
 223          //-----------------------------------------------------------------------------
 224          //
 225          // Return Value : None
 226          // Parameters   : None
 227          //
 228          // This function disables the watchdog timer.
 229          //
 230          //-----------------------------------------------------------------------------
 231          void PCA0_Init (void)
 232          {
 233   1         PCA0MD &= ~0x40;                    // Disable the Watchdog Timer
 234   1         PCA0MD = 0x00;
 235   1      }
 236          
 237          //-----------------------------------------------------------------------------
 238          // Oscillator_Init
 239          //-----------------------------------------------------------------------------
 240          //
C51 COMPILER V8.16   F32X_SPI0_MASTER                                                      09/08/2012 11:11:44 PAGE 5   

 241          // Return Value : None
 242          // Parameters   : None
 243          //
 244          // This function initializes the system clock to use the internal oscillator
 245          // at 12 MHz.
 246          //
 247          //-----------------------------------------------------------------------------
 248          void Oscillator_Init (void)
 249          {
 250   1         OSCICN = 0x83;                      // Set the internal oscillator to
 251   1                                             // 12 MHz
 252   1      }
 253          
 254          //-----------------------------------------------------------------------------
 255          // Port_Init
 256          //-----------------------------------------------------------------------------
 257          //
 258          // Return Value : None
 259          // Parameters   : None
 260          //
 261          // This function configures the crossbar and GPIO ports.
 262          //
 263          // P0.0  -  SCK  (SPI0), Push-Pull,  Digital
 264          // P0.1  -  MISO (SPI0), Open-Drain, Digital
 265          // P0.2  -  MOSI (SPI0), Push-Pull,  Digital
 266          // P0.3  -  NSS  (SPI0), Push-Pull,  Digital
 267          //
 268          // P2.2  -  Skipped,     Push-Pull,  Digital (LED D4 on Target Board)
 269          //
 270          //-----------------------------------------------------------------------------
 271          void PORT_Init (void)
 272          {
 273   1         P0MDOUT = 0x0D;                     // Make SCK, MOSI, and NSS push-pull
 274   1         P2MDOUT = 0x04;                     // Make the LED push-pull
 275   1      
 276   1         P2SKIP = 0x04;                      // Skip the LED (P2.2)
 277   1      
 278   1         XBR0 = 0x02;                        // Enable the SPI on the XBAR
 279   1         XBR1 = 0x40;                        // Enable the XBAR and weak pull-ups
 280   1      }
 281          
 282          //-----------------------------------------------------------------------------
 283          // SPI0_Init
 284          //-----------------------------------------------------------------------------
 285          //
 286          // Return Value : None
 287          // Parameters   : None
 288          //
 289          // Configures SPI0 to use 4-wire Single Master mode. The SPI timing is
 290          // configured for Mode 0,0 (data centered on first edge of clock phase and
 291          // SCK line low in idle state).
 292          //
 293          //-----------------------------------------------------------------------------
 294          void SPI0_Init()
 295          {
 296   1         SPI0CFG   = 0x40;                   // Enable the SPI as a Master
 297   1                                             // CKPHA = '0', CKPOL = '0'
 298   1         SPI0CN    = 0x0D;                   // 4-wire Single Master, SPI enabled
 299   1      
 300   1         // SPI clock frequency equation from the datasheet
 301   1         SPI0CKR   = (SYSCLK/(2*SPI_CLOCK))-1;
 302   1      
C51 COMPILER V8.16   F32X_SPI0_MASTER                                                      09/08/2012 11:11:44 PAGE 6   

 303   1         ESPI0 = 1;                          // Enable SPI interrupts
*** ERROR C202 IN LINE 303 OF ..\SPI\SPI\F32X_SPI0_MASTER.C: 'ESPI0': undefined identifier
 304   1      }
 305          
 306          //-----------------------------------------------------------------------------
 307          // Init_Device
 308          //-----------------------------------------------------------------------------
 309          //
 310          // Return Value : None
 311          // Parameters   : None
 312          //
 313          // Calls all device initialization functions.
 314          //
 315          //-----------------------------------------------------------------------------
 316          void Init_Device (void)
 317          {
 318   1         PCA0_Init ();                       // Disable the Watchdog Timer first
 319   1         Oscillator_Init ();
 320   1         Port_Init ();
 321   1         SPI0_Init ();
 322   1      }
 323          
 324          //-----------------------------------------------------------------------------
 325          // Interrupt Service Routines
 326          //-----------------------------------------------------------------------------
 327          
 328          //-----------------------------------------------------------------------------
 329          // SPI_ISR
 330          //-----------------------------------------------------------------------------
 331          //
 332          // Handles all error checks and single-byte writes.
 333          //
 334          // Note: SPI_WRITE_ARRAY is not handled by this ISR in order to take
 335          // advantage of double-buffering (checking the TXBMT flag) using polling.
 336          //
 337          //
 338          // Typical Write:
 339          //
 340          //              | 1st sent | 2nd sent | 3rd sent |   ...    | last sent |
 341          //              ---------------------------------------------------------
 342          //  Master NSSv | Command  |   Data1  |   Data2  |   ...    |   DataN   |  NSS^
 343          //  Slave       |   N/A    |    N/A   |    N/A   |   ...    |    N/A    |
 344          //
 345          // Typical Read:
 346          //
 347          //              | 1st sent | 2nd sent | 3rd sent |   ...    | last sent |
 348          //              ---------------------------------------------------------
 349          //  Master NSSv | Command  |   dummy  |   dummy  |   ...    |   dummy   |  NSS^
 350          //  Slave       |   N/A    |   Data1  |   Data2  |   ...    |   DataN   |
 351          //-----------------------------------------------------------------------------
 352          void SPI_ISR (void) interrupt 6
 353          {
 354   1         static unsigned char array_index = 0;
 355   1         static char state = 0;
 356   1      
 357   1         if (WCOL == 1)
 358   1         {
 359   2            // Write collision occurred
 360   2            WCOL = 0;                        // Clear the write collision flag
 361   2      
 362   2            Error_Flag = 1;
 363   2         }
C51 COMPILER V8.16   F32X_SPI0_MASTER                                                      09/08/2012 11:11:44 PAGE 7   

 364   1         else
 365   1         {
 366   2            if (SPI0DAT == ERROR_OCCURRED)
 367   2            {
 368   3               // This example recognizes when an error occurs, but does not include
 369   3               // any error handling.  The transfer can be aborted or rescheduled,
 370   3               // if desired.
 371   3               Error_Flag = 1;
 372   3            }
 373   2      
 374   2            // When the Master enters the ISR, the SPIF flag should be set from
 375   2            // sending the Command byte.  This ISR handles the remaining steps of the
 376   2            // SPI transfer process.
 377   2            // <state> == 0: writing or reading 1 byte of data
 378   2            // <state> == 1: for READ commands (first time, only a dummy byte is
 379   2            //               sent but the second time, the data must be read from
 380   2            //               SPI0DAT)
 381   2            // <state> == 2: NSS = 1 to end the transfer, final byte read
 382   2            //
 383   2            // Note: SPI_WRITE_BUFFER is not handled here because it's done in
 384   2            // polled mode
 385   2            if (state == 0)
 386   2            {
 387   3               switch (Command)
 388   3               {
 389   4                  case SLAVE_LED_ON:
 390   4                  case SLAVE_LED_OFF:
 391   4                     NSSMD0 = 1;             // Release the slave (not expecting
 392   4                                             // data back)
 393   4      
 394   4                     break;
 395   4      
 396   4                  case SPI_WRITE:
 397   4                     SPI0DAT = SPI_Data;
 398   4      
 399   4                     state = 2;              // Advance to the final state (only
 400   4                                             // writing one byte)
 401   4      
 402   4                     break;
 403   4      
 404   4                  case SPI_READ:
 405   4                     SPI0DAT = 0xFF;         // Send a dummy byte so the Slave can
 406   4                                             // send the data
 407   4      
 408   4                     state = 2;              // Advance to the final state (only
 409   4                                             // reading one byte)
 410   4      
 411   4                     break;
 412   4      
 413   4                  case SPI_READ_BUFFER:
 414   4                     array_index = 0;        // Clear the data counter
 415   4      
 416   4                     SPI0DAT = 0xFF;         // Send a dummy byte so the Slave can
 417   4                                             // start sending the data
 418   4      
 419   4                     state = 1;              // Advance to the next state where the
 420   4                                             // data can be received
 421   4                                             // The data from the slave is not
 422   4                                             // available until after the second
 423   4                                             // transfer is completed.
 424   4                                             // The dummy byte allows the slave to
 425   4                                             // send data, since the Master controls
C51 COMPILER V8.16   F32X_SPI0_MASTER                                                      09/08/2012 11:11:44 PAGE 8   

 426   4                                             // SCK.
 427   4      
 428   4                     break;
 429   4      
 430   4                  default:
 431   4                     state = 2;              // Any errors in the Command parsing
 432   4                                             // should go to state 2 where NSSMD0
 433   4                                             // is de-asserted
 434   4               }
 435   3            }
 436   2            else if (state == 1)             // This state is for READ_ARRAY
 437   2            {                                // commands where the data must be read
 438   3                                             // after the first dummy byte is sent
 439   3               switch (Command)
 440   3               {
 441   4                  case SPI_READ_BUFFER:
 442   4                     SPI_Data_Array[array_index] = SPI0DAT;
 443   4                     SPI0DAT = 0xFF;
 444   4      
 445   4                     array_index++;
 446   4      
 447   4                     if (array_index == (MAX_BUFFER_SIZE-1))
 448   4                     {
 449   5                        state = 2;
 450   5                     }
 451   4      
 452   4                     break;
 453   4                  default:
 454   4                     state = 2;              // Any errors in the Command parsing
 455   4                                             // should go to state 2 where NSSMD0
 456   4                                             // is de-asserted
 457   4               }
 458   3            }
 459   2            else if (state == 2)
 460   2            {
 461   3               switch (Command)
 462   3               {
 463   4                  case SPI_READ:
 464   4                     SPI_Data = SPI0DAT;     // Read the data from the slave
 465   4      
 466   4                     break;
 467   4      
 468   4                  case SPI_READ_BUFFER:
 469   4                     SPI_Data_Array[array_index] = SPI0DAT; // Read the last data
 470   4                                                            // without sending a
 471   4                                                            // dummy byte
 472   4      
 473   4                     break;
 474   4               }
 475   3      
 476   3               NSSMD0 = 1;                   // De-select the Slave
 477   3      
 478   3               state = 0;                    // Reset the state
 479   3            }
 480   2      
 481   2            SPIF = 0;                        // Clear the SPIF flag
 482   2         }
 483   1      }
 484          
 485          //-----------------------------------------------------------------------------
 486          // Support Routines
 487          //-----------------------------------------------------------------------------
C51 COMPILER V8.16   F32X_SPI0_MASTER                                                      09/08/2012 11:11:44 PAGE 9   

 488          
 489          //-----------------------------------------------------------------------------
 490          // SPI_LED_On
 491          //-----------------------------------------------------------------------------
 492          //
 493          // Return Value : None
 494          // Parameters   : None
 495          //
 496          // Turns the LED on the SPI Slave on.  The slave does not respond to this
 497          // command, so the command consists of:
 498          //
 499          // Command = SLAVE_LED_ON
 500          // Length = 1 byte (the command itself)
 501          //
 502          //-----------------------------------------------------------------------------
 503          void SPI_LED_On (void)
 504          {
 505   1         while (!NSSMD0);                    // Wait until the SPI is free, in case
 506   1                                             // it's already busy
 507   1      
 508   1         NSSMD0 = 0;
 509   1      
 510   1         Command = SLAVE_LED_ON;
 511   1      
 512   1         SPI0DAT = Command;
 513   1      
 514   1         // The rest of this command will be handled by the SPI ISR, which will
 515   1         // trigger when SPIF is set from sending the Command
 516   1      }
 517          
 518          //-----------------------------------------------------------------------------
 519          // SPI_LED_Off
 520          //-----------------------------------------------------------------------------
 521          //
 522          // Return Value : None
 523          // Parameters   : None
 524          //
 525          // Turns the LED on the SPI Slave off.  The slave does not respond to this
 526          // command, so the command consists of:
 527          //
 528          // Command = SLAVE_LED_OFF
 529          // Length = 1 byte (the command itself)
 530          //
 531          //-----------------------------------------------------------------------------
 532          void SPI_LED_Off (void)
 533          {
 534   1         while (!NSSMD0);                    // Wait until the SPI is free, in case
 535   1                                             // it's already busy
 536   1      
 537   1         NSSMD0 = 0;
 538   1      
 539   1         Command = SLAVE_LED_OFF;
 540   1      
 541   1         SPI0DAT = Command;
 542   1      
 543   1         // The rest of this command will be handled by the SPI ISR, which will
 544   1         // trigger when SPIF is set from sending the Command
 545   1      }
 546          
 547          //-----------------------------------------------------------------------------
 548          // SPI_Byte_Write
 549          //-----------------------------------------------------------------------------
C51 COMPILER V8.16   F32X_SPI0_MASTER                                                      09/08/2012 11:11:44 PAGE 10  

 550          //
 551          // Return Value : None
 552          // Parameters   : None
 553          //
 554          // Note: SPI_Data must contain the data to be sent before calling this
 555          // function.
 556          //
 557          // Writes a single byte to the SPI Slave.  The slave does not respond to this
 558          // command, so the command consists of:
 559          //
 560          // Command = SPI_WRITE
 561          // Length = 1 byte of command, 1 byte of data
 562          //
 563          //-----------------------------------------------------------------------------
 564          void SPI_Byte_Write (void)
 565          {
 566   1         while (!NSSMD0);                    // Wait until the SPI is free, in case
 567   1                                             // it's already busy
 568   1      
 569   1         NSSMD0 = 0;
 570   1      
 571   1         Command = SPI_WRITE;
 572   1      
 573   1         SPI0DAT = Command;
 574   1      
 575   1         // The rest of this command will be handled by the SPI ISR, which will
 576   1         // trigger when SPIF is set from sending the Command
 577   1      }
 578          
 579          //-----------------------------------------------------------------------------
 580          // SPI_Byte_Read
 581          //-----------------------------------------------------------------------------
 582          //
 583          // Return Value : None
 584          // Parameters   : None
 585          //
 586          // Note: SPI_Data will contain the data received after calling this function.
 587          //
 588          // Reads a single byte from the SPI Slave.  The command consists of:
 589          //
 590          // Command = SPI_READ
 591          // Length = 1 byte of command, 1 byte of data
 592          //
 593          //-----------------------------------------------------------------------------
 594          void SPI_Byte_Read (void)
 595          {
 596   1         while (!NSSMD0);                    // Wait until the SPI is free, in case
 597   1                                             // it's already busy
 598   1      
 599   1         NSSMD0 = 0;
 600   1      
 601   1         Command = SPI_READ;
 602   1      
 603   1         SPI0DAT = Command;
 604   1      
 605   1         // The rest of this command will be handled by the SPI ISR, which will
 606   1         // trigger when SPIF is set from sending the Command
 607   1      }
 608          
 609          //-----------------------------------------------------------------------------
 610          // SPI_Array_Write
 611          //-----------------------------------------------------------------------------
C51 COMPILER V8.16   F32X_SPI0_MASTER                                                      09/08/2012 11:11:44 PAGE 11  

 612          //
 613          // Return Value : None
 614          // Parameters   : None
 615          //
 616          // Note: SPI_Data_Array must contain the data to be sent before calling this
 617          // function.
 618          //
 619          // Writes an array of values of size MAX_BUFFER_SIZE to the SPI Slave.  The
 620          // command consists of:
 621          //
 622          // Command = SPI_WRITE_BUFFER
 623          // Length = 1 byte of command, MAX_BUFFER_SIZE bytes of data
 624          //
 625          // Note: Polled mode is used for this function in order to buffer the data
 626          // being sent using the TXBMT flag.
 627          //
 628          //-----------------------------------------------------------------------------
 629          void SPI_Array_Write (void)
 630          {
 631   1         unsigned char array_index;
 632   1      
 633   1         while (!NSSMD0);                    // Wait until the SPI is free, in case
 634   1                                             // it's already busy
 635   1      
 636   1         ESPI0 = 0;                          // Disable SPI interrupts
*** ERROR C202 IN LINE 636 OF ..\SPI\SPI\F32X_SPI0_MASTER.C: 'ESPI0': undefined identifier
 637   1      
 638   1         NSSMD0 = 0;
 639   1      
 640   1         SPI0DAT = SPI_WRITE_BUFFER;         // Load the XMIT register
 641   1         while (TXBMT != 1)                  // Wait until the command is moved into
 642   1         {                                   // the XMIT buffer
 643   2         }
 644   1      
 645   1         for (array_index = 0; array_index < MAX_BUFFER_SIZE; array_index++)
 646   1         {
 647   2            SPI0DAT = SPI_Data_Array[array_index]; // Load the data into the buffer
 648   2            while (TXBMT != 1)               // Wait until the data is moved into
 649   2            {                                // the XMIT buffer
 650   3            }
 651   2         }
 652   1         SPIF = 0;
 653   1         while (SPIF != 1)                   // Wait until the last byte of the
 654   1         {                                   // data reaches the Slave
 655   2         }
 656   1         SPIF = 0;
 657   1      
 658   1         NSSMD0 = 1;                         // Diable the Slave
 659   1      
 660   1         ESPI0 = 1;                          // Re-enable SPI interrupts
*** ERROR C202 IN LINE 660 OF ..\SPI\SPI\F32X_SPI0_MASTER.C: 'ESPI0': undefined identifier
 661   1      }
 662          
 663          //-----------------------------------------------------------------------------
 664          // SPI_Array_Read
 665          //-----------------------------------------------------------------------------
 666          //
 667          // Return Value : None
 668          // Parameters   : None
 669          //
 670          // Note: SPI_Data_Array will contain the data received after calling this
 671          // function.
C51 COMPILER V8.16   F32X_SPI0_MASTER                                                      09/08/2012 11:11:44 PAGE 12  

 672          //
 673          // Reads a single byte from the SPI Slave.  The command consists of:
 674          //
 675          // Command = SPI_READ_BUFFER
 676          // Length = 1 byte of command, MAX_BUFFER_SIZE bytes of data
 677          //
 678          //-----------------------------------------------------------------------------
 679          void SPI_Array_Read (void)
 680          {
 681   1         while (!NSSMD0);                    // Wait until the SPI is free, in case
 682   1                                             // it's already busy
 683   1      
 684   1         NSSMD0 = 0;
 685   1      
 686   1         Command = SPI_READ_BUFFER;
 687   1      
 688   1         SPI0DAT = Command;
 689   1      
 690   1         // The rest of this command will be handled by the SPI ISR, which will
 691   1         // trigger when SPIF is set from sending the Command
 692   1      }
 693          
 694          //-----------------------------------------------------------------------------
 695          // Delay
 696          //-----------------------------------------------------------------------------
 697          //
 698          // Return Value : None
 699          // Parameters   : None
 700          //
 701          // Delay for little while (used for blinking the LEDs)
 702          //
 703          //-----------------------------------------------------------------------------
 704          void Delay (void)
 705          {
 706   1         unsigned long count;
 707   1      
 708   1         for (count = 100000; count > 0; count--);
 709   1      }
 710          
 711          //-----------------------------------------------------------------------------
 712          // End Of File
 713          //-----------------------------------------------------------------------------

C51 COMPILATION COMPLETE.  0 WARNING(S),  3 ERROR(S)
